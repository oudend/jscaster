import { ILexingResult, IToken, Lexer, TokenType } from "chevrotain";
export declare const RESERVED_KEYWORDS: string[];
export declare namespace TOKEN {
    const ASSIGN_OP: TokenType;
    const UNARY_OP: TokenType;
    const POSTFIX_OP: TokenType;
    const PRECISION_QUALIFIER: TokenType;
    const INTERPOLATION_QUALIFIER: TokenType;
    const MULTIPLICATIVE_OP: TokenType;
    const ADDITIVE_OP: TokenType;
    const SHIFT_OP: TokenType;
    const RELATIONAL_OP: TokenType;
    const EQUALITY_OP: TokenType;
    const PARAMETER_QUALIFIER: TokenType;
    const WHITESPACE: TokenType;
    const LINE_COMMENT: TokenType;
    const MULTILINE_COMMENT: TokenType;
    const MULASSIGN: TokenType;
    const DIVASSIGN: TokenType;
    const MODASSIGN: TokenType;
    const ADDASSIGN: TokenType;
    const SUBASSIGN: TokenType;
    const LEFTASSIGN: TokenType;
    const RIGHTASSIGN: TokenType;
    const ANDASSIGN: TokenType;
    const XORASSIGN: TokenType;
    const ORASSIGN: TokenType;
    const INC_OP: TokenType;
    const QUESTION: TokenType;
    const COLON: TokenType;
    const DEC_OP: TokenType;
    const AND_OP: TokenType;
    const XOR_OP: TokenType;
    const OR_OP: TokenType;
    const LEFT_OP: TokenType;
    const RIGHT_OP: TokenType;
    const EQ_OP: TokenType;
    const NE_OP: TokenType;
    const LE_OP: TokenType;
    const GE_OP: TokenType;
    const LEFT_ANGLE: TokenType;
    const RIGHT_ANGLE: TokenType;
    const PLUS: TokenType;
    const TILDE: TokenType;
    const BANG: TokenType;
    const CARET: TokenType;
    const AMPERSAND: TokenType;
    const VERTICAL_BAR: TokenType;
    const SLASH: TokenType;
    const PERCENT: TokenType;
    const STAR: TokenType;
    const DASH: TokenType;
    const COMMA: TokenType;
    const EQUAL: TokenType;
    const LEFT_PAREN: TokenType;
    const RIGHT_PAREN: TokenType;
    const LEFT_BRACKET: TokenType;
    const RIGHT_BRACKET: TokenType;
    const LEFT_BRACE: TokenType;
    const RIGHT_BRACE: TokenType;
    const SEMICOLON: TokenType;
    const IDENTIFIER: TokenType;
    const NON_PP_IDENTIFIER: TokenType;
    const PP: TokenType;
    const DEFINE: TokenType;
    const UNDEF: TokenType;
    const ENDIF: TokenType;
    const IFDEF: TokenType;
    const IFNDEF: TokenType;
    const ELIF: TokenType;
    const ERROR: TokenType;
    const VERSION: TokenType;
    const PRAGMA_DIRECTIVE: TokenType;
    const LINE: TokenType;
    const EXTENSION: TokenType;
    const INCLUDE: TokenType;
    const HASH: TokenType;
    const KEYWORD: TokenType;
    const CONST: TokenType;
    const UNIFORM: TokenType;
    const LAYOUT: TokenType;
    const CENTROID: TokenType;
    const FLAT: TokenType;
    const SMOOTH: TokenType;
    const BREAK: TokenType;
    const CONTINUE: TokenType;
    const DO: TokenType;
    const PRECISION: TokenType;
    const FOR: TokenType;
    const WHILE: TokenType;
    const SWITCH: TokenType;
    const CASE: TokenType;
    const DEFAULT: TokenType;
    const IF: TokenType;
    const ELSE: TokenType;
    const INVARIANT: TokenType;
    const INOUT: TokenType;
    const OUT: TokenType;
    const VOID: TokenType;
    const STRUCT: TokenType;
    const DISCARD: TokenType;
    const RETURN: TokenType;
    const LOWP: TokenType;
    const MEDIUMP: TokenType;
    const HIGHP: TokenType;
    const CONSTANT: TokenType;
    const BASIC_TYPE: TokenType;
    const BOOL: TokenType;
    const INT: TokenType;
    const FLOAT: TokenType;
    const MAT2X3: TokenType;
    const MAT2X4: TokenType;
    const MAT2X2: TokenType;
    const MAT3X2: TokenType;
    const MAT3X4: TokenType;
    const MAT3X3: TokenType;
    const MAT4X2: TokenType;
    const MAT4X3: TokenType;
    const MAT4X4: TokenType;
    const VEC2: TokenType;
    const VEC3: TokenType;
    const VEC4: TokenType;
    const IVEC2: TokenType;
    const IVEC3: TokenType;
    const IVEC4: TokenType;
    const BVEC2: TokenType;
    const BVEC3: TokenType;
    const BVEC4: TokenType;
    const UINT: TokenType;
    const UVEC2: TokenType;
    const UVEC3: TokenType;
    const UVEC4: TokenType;
    const USAMPLERCUBE: TokenType;
    const USAMPLER3D: TokenType;
    const USAMPLER2DARRAY: TokenType;
    const USAMPLER2D: TokenType;
    const SAMPLERCUBESHADOW: TokenType;
    const SAMPLERCUBE: TokenType;
    const SAMPLER3D: TokenType;
    const SAMPLER2DSHADOW: TokenType;
    const SAMPLER2DARRAYSHADOW: TokenType;
    const SAMPLER2DARRAY: TokenType;
    const SAMPLER2D: TokenType;
    const ISAMPLERCUBE: TokenType;
    const ISAMPLER3D: TokenType;
    const ISAMPLER2DARRAY: TokenType;
    const ISAMPLER2D: TokenType;
    const IN: TokenType;
    const VARYING: TokenType;
    const ATTRIBUTE: TokenType;
    const BOOLCONSTANT: TokenType;
    const FLOATCONSTANT: TokenType;
    const DOT: TokenType;
    const UINTCONSTANT: TokenType;
    const INTCONSTANT: TokenType;
    const STRING: TokenType;
}
export declare const ALL_TOKENS: any[];
export declare const GLSL_LEXER: Lexer;
export declare function checkLexingErrors(input: string, lexingResult: ILexingResult): void;
export declare function isIdentifier(token: IToken): boolean;
export declare function lex(input: string): IToken[];
export declare function doOp(op: TokenType, a: any, b: any): any;
export declare function isBitwiseOperator(tokenType: TokenType): boolean;
//# sourceMappingURL=lexer.d.ts.map