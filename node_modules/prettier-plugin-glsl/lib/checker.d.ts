import { TokenType } from "chevrotain";
import { Declarator, FunctionDefinition, FunctionPrototype, InitDeclaratorListDeclaration, Node, ParameterDeclaration, StructSpecifier, TranslationUnit } from "./nodes";
import { CheckError } from "./util";
type BasicType = Readonly<{
    kind: "basic";
    type: TokenType;
}>;
type ArrayType = Readonly<{
    kind: "array";
    of: NormalizedType | undefined;
    size: number;
}>;
type StructType = Readonly<{
    kind: "struct";
    specifier: StructSpecifier;
    fields: {
        [name: string]: {
            type: NormalizedType | undefined;
            declarator: Declarator;
        };
    };
}>;
export type ShaderType = "vertex" | "fragment";
type NormalizedType = BasicType | ArrayType | StructType;
declare function BasicType(type?: TokenType): NormalizedType | undefined;
declare namespace BasicType {
    const FLOAT: NormalizedType;
    const BOOL: NormalizedType;
    const VOID: NormalizedType;
    const INT: NormalizedType;
    const UINT: NormalizedType;
}
export declare function typeString(t: NormalizedType | undefined): string;
type TypeAndValue = {
    type: NormalizedType;
    value: any;
};
export declare function evaluateConstantExpression(n: Node): TypeAndValue | undefined;
interface FunctionBinding {
    kind: "function";
    overloads: {
        params: NormalizedType[];
        result: NormalizedType;
        def: FunctionDefinition | FunctionPrototype;
    }[];
    builtIn: boolean;
}
interface StructBinding {
    kind: "struct";
    type: StructType;
}
interface VariableBinding {
    kind: "variable";
    declaratorList?: InitDeclaratorListDeclaration;
    declarator?: Declarator;
    parameter?: ParameterDeclaration;
    type: NormalizedType | undefined;
}
declare module "./nodes" {
    interface FunctionCall extends BaseNode {
        constructorType?: NormalizedType;
        binding?: FunctionBinding;
    }
    interface VariableExpression extends BaseNode {
        binding?: VariableBinding;
    }
    interface FunctionDefinition extends BaseNode {
        returnTypeResolved?: NormalizedType;
    }
    interface FunctionPrototype extends BaseNode {
        returnTypeResolved?: NormalizedType;
    }
    interface TypeSpecifier extends BaseNode {
        typeSpecifierNonArrayBinding?: StructBinding;
    }
    interface BaseExpressionNode {
        resolvedType?: NormalizedType;
    }
}
export declare function check(u: TranslationUnit, shaderType: ShaderType | undefined): CheckError[];
export {};
//# sourceMappingURL=checker.d.ts.map